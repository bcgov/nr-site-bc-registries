name: Pull Request

on:
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  TRIGGERS: ('frontend/' 'backend/' '.github/openshift' '.github/workflows')
  NAME: gfp

jobs:
  check:
    name: Check
    outputs:
      build: ${{ steps.check.outputs.build }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check and process modified files
        id: check
        run: |
          # Fetch main to diff against
          git fetch origin main:refs/remotes/origin/master

          # Trigger build if diff matches any triggers
          TRIGGERS=${{ env.TRIGGERS }}
          while read -r check
          do
              for t in "${TRIGGERS[@]}"; do
                  if [[ "${check}" =~ "${t}" ]]
                  then
                      # Output build=true for next steps
                      echo "::set-output name=build::true"
                      echo -e "${t}\n --> ${check}\n"
                      exit 0
                  fi
              done
          done < <(git diff origin/main --name-only)
          echo "Build and deploy workflows not triggered"

  build-backend:
    name: Build-Backend
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./backend/
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-backend
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    name: Build-Frontend
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./frontend/
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-frontend
          cache-from: type=gha
          cache-to: type=gha,mode=max

  tests-frontend:
    name: Tests-Frontend
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Tests
        run: |
          cd frontend
          npm ci
          npm test

  tests-backend:
    name: Tests-Backend
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Tests
        run: |
          cd backend
          npm ci
          npm test

  # # https://github.com/snyk/snyk
  # snyk:
  #   name: Snyk
  #   needs:
  #     - check
  #   if: needs.check.outputs.build == 'true'
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2

  #   - name: Run Snyk to check for vulnerabilities
  #     uses: snyk/actions/node@master
  #     env:
  #       SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  #     with:
  #       args: --all-projects --severity-threshold=high

  # https://github.com/marketplace/actions/aqua-security-trivy
  trivy-repo:
    name: Trivy-Repo
    needs:
      - check
    if: needs.check.outputs.build == 'true'
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.2.3
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: "trivy-results.sarif"

  trivy-backend:
    name: Trivy-Backend
    needs:
      - build-backend
      - build-frontend
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@0.2.3
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-backend
          ignore-unfixed: true
          severity: CRITICAL
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: "trivy-results.sarif"

  trivy-frontend:
    name: Trivy-Frontend
    needs:
      - build-backend
      - build-frontend
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@0.2.3
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.number }}-frontend
          ignore-unfixed: true
          severity: CRITICAL
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: "trivy-results.sarif"

  deploy-dev:
    name: Deploy-Dev
    needs:
      - build-backend
      - build-frontend
    runs-on: ubuntu-latest
    environment:
      name: dev
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.NAMESPACE }}

          # Process and apply deployment templates
          oc process -f .github/openshift/deploy.database.yml -p ZONE=${{ github.event.number }} | oc apply -f -
          oc process -f .github/openshift/deploy.backend.yml -p ZONE=${{ github.event.number }} \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-backend | oc apply -f -
          oc process -f .github/openshift/deploy.frontend.yml -p ZONE=${{ github.event.number }} \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-frontend | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-${{ github.event.number }}-database -w
          oc rollout status dc/${{ env.NAME }}-${{ github.event.number }}-backend -w
          oc rollout status dc/${{ env.NAME }}-${{ github.event.number }}-frontend -w

      - name: Deployment update
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          message: |
            [Dev - Backend](https://${{ env.NAME }}-${{ github.event.number }}-backend.apps.silver.devops.gov.bc.ca/) available
            [Dev - Frontend](https://${{ env.NAME }}-${{ github.event.number }}-frontend.apps.silver.devops.gov.bc.ca/) available
          allow-repeats: false

  zap-dev-backend:
    name: Zap-Dev-Backend
    needs:
      - deploy-dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: https://${{ env.NAME }}-${{ github.event.number }}-backend.apps.silver.devops.gov.bc.ca/
          cmd_options: "-a"
          allow_issue_writing: false
          fail_action: false

  zap-dev-frontend:
    name: Zap-Dev-Frontend
    needs:
      - deploy-dev
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: https://${{ env.NAME }}-${{ github.event.number }}-frontend.apps.silver.devops.gov.bc.ca/
          cmd_options: "-a"
          allow_issue_writing: false
          fail_action: false

  deploy-prod:
    name: Deploy-Prod
    needs:
      - deploy-dev
    runs-on: ubuntu-latest
    environment:
      name: prod
    steps:
      - uses: actions/checkout@v2
      - name: Deploy
        run: |
          # Login to OpenShift and select project
          oc login --token=${{ secrets.OC_TOKEN }} --server=${{ secrets.OC_SERVER }}
          oc project ${{ secrets.NAMESPACE }}

          # Process and apply deployment templates
          oc process -f .github/openshift/deploy.database.yml -p ZONE=prod | oc apply -f -
          oc process -f .github/openshift/deploy.backend.yml -p ZONE=prod \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-backend | oc apply -f -
          oc process -f .github/openshift/deploy.frontend.yml -p ZONE=prod \
            -p PROMOTE=${{ github.repository }}:${{ github.event.number }}-frontend | oc apply -f -

          # Follow any active rollouts (see deploymentconfigs)
          oc rollout status dc/${{ env.NAME }}-prod-database -w
          oc rollout status dc/${{ env.NAME }}-prod-backend -w
          oc rollout status dc/${{ env.NAME }}-prod-frontend -w

      - name: Deployment update
        uses: mshick/add-pr-comment@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          message: |
            [Prod - Backend](https://${{ env.NAME }}-prod-backend.apps.silver.devops.gov.bc.ca/) available
            [Prod - Frontend](https://${{ env.NAME }}-prod-frontend.apps.silver.devops.gov.bc.ca/) available
          allow-repeats: false

  zap-prod-backend:
    name: Zap-Prod-Backend
    needs:
      - deploy-prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: https://${{ env.NAME }}-prod-backend.apps.silver.devops.gov.bc.ca/
          cmd_options: "-a"
          allow_issue_writing: fase
          fail_action: false

  zap-prod-frontend:
    name: Zap-Prod-Frontend
    needs:
      - deploy-prod
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: ZAP Scan
        uses: zaproxy/action-full-scan@v0.3.0
        with:
          target: https://${{ env.NAME }}-prod-frontend.apps.silver.devops.gov.bc.ca/
          cmd_options: "-a"
          allow_issue_writing: false
          fail_action: false
