apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: ${NAME}
  annotations:
    description: "Greenfield Template"
    tags: "gfp"
    iconClass: icon-js
labels:
  app: ${NAME}-${ZONE}
  app.kubernetes.io/part-of: ${NAME}-${ZONE}
parameters:
  - name: NAME
    description: Module name
    value: esra
  - name: COMPONENT
    description: Component name
    value: frontend
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: DOMAIN
    value: apps.silver.devops.gov.bc.ca
  - name: CPU_REQUEST
    value: "2"
  - name: MEMORY_REQUEST
    value: 1Gi
  - name: CPU_LIMIT
    value: "2"
  - name: MEMORY_LIMIT
    value: 2Gi
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
objects:
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE}
          referencePolicy:
            type: Local
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: esra-sessions
      labels:
        app: ${NAME}-${ZONE}
    spec:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: "256Mi"
      storageClassName: netapp-file-standard
  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Rolling
      template:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          volumes:
            - name: esra-sessions
              persistentVolumeClaim:
                claimName: esra-sessions
          containers:
            - image: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
              imagePullPolicy: Always
              name: ${NAME}
              env:
                - name: NODE_TLS_REJECT_UNAUTHORIZED
                  value: "0"
                - name: BACKEND_URL
                  value: http://${NAME}-${ZONE}-backend
                - name: site_environment
                  value: TEST
                - name: SESSION_PATH
                  value: "/mnt/sessions"
                - name: COOKIE_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: esra-sessions
                      key: COOKIE_SECRET
                - name: BC_REGISTRY_BASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: bc-registry-config
                      key: BC_REGISTRY_BASE_URL
                - name: baseUrl
                  valueFrom:
                    secretKeyRef:
                      name: bc-registry-config
                      key: baseUrl
                - name: API_KEY_HOST
                  valueFrom:
                    secretKeyRef:
                      name: bc-registry-config
                      key: API_KEY_HOST
                - name: SESSION_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: esra-sessions
                      key: SESSION_SECRET
                - name: KEYCLOAK_BASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: keycloak
                      key: KEYCLOAK_BASE_URL
                - name: KEYCLOAK_REALM
                  valueFrom:
                    secretKeyRef:
                      name: keycloak
                      key: KEYCLOAK_REALM
                - name: KEYCLOAK_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: keycloak
                      key: KEYCLOAK_CLIENT_ID
                - name: KEYCLOAK_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: keycloak
                      key: KEYCLOAK_SECRET
                - name: KEYCLOAK_XAPIKEY
                  valueFrom:
                    secretKeyRef:
                      name: keycloak
                      key: KEYCLOAK_XAPIKEY
                - name: common_service_keycloak_base_url
                  valueFrom:
                    secretKeyRef:
                      name: common-services
                      key: common_service_keycloak_base_url
                - name: cdogs_url
                  valueFrom:
                    secretKeyRef:
                      name: common-services
                      key: cdogs_url
                - name: ches_url
                  valueFrom:
                    secretKeyRef:
                      name: common-services
                      key: ches_url
                - name: service_realm
                  valueFrom:
                    secretKeyRef:
                      name: common-services
                      key: service_realm
                - name: cdogs_service_client_id
                  valueFrom:
                    secretKeyRef:
                      name: common-services
                      key: cdogs_service_client_id
                - name: cdogs_service_client_secret
                  valueFrom:
                    secretKeyRef:
                      name: common-services
                      key: cdogs_service_client_secret
                - name: ches_service_client_id
                  valueFrom:
                    secretKeyRef:
                      name: common-services
                      key: ches_service_client_id
                - name: ches_service_client_secret
                  valueFrom:
                    secretKeyRef:
                      name: common-services
                      key: ches_service_client_secret
                - name: bc_registry_dashboard_url
                  valueFrom:
                    secretKeyRef:
                      name: common-services
                      key: bc_registry_dashboard_url
              ports:
                - containerPort: 3000
                  protocol: TCP
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
              readinessProbe:
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 30
                timeoutSeconds: 1
              livenessProbe:
                successThreshold: 1
                failureThreshold: 5
                httpGet:
                  path: /
                  port: 3000
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 30
                timeoutSeconds: 5
              volumeMounts:
                - mountPath: /mnt/sessions
                  name: esra-sessions
              securityContext:
                allowPrivilegeEscalation: true
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: 3000-tcp
          protocol: TCP
          port: 80
          targetPort: 3000
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
      annotations:
        haproxy.router.openshift.io/timeout: 600s
    spec:
      host: ${NAME}-${ZONE}-${COMPONENT}.${DOMAIN}
      port:
        targetPort: 3000-tcp
      to:
        kind: Service
        name: ${NAME}-${ZONE}-${COMPONENT}
        weight: 100
      tls:
        termination: edge
        insecureEdgeTerminationPolicy: Redirect
