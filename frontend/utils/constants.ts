import { siteDto } from './types';

export const PAGE_TITLES = {
  INDEX: 'BC Site Registry',
  PARCEL_ID: 'Parcel ID Search',
  CROWN_PIN: 'Crown Lands PIN',
  CROWN_FILE: 'Crown Lands File #',
  SITE_ID_SEARCH: 'Site ID Search',
  ADDRESS_SEARCH: 'Address Search',
  AREA_SEARCH: 'Area Search',
  VIEW_SEARCH_RESULTS: 'View Search Results',
};

export const testData: siteDto = {
  docid: 2,
  site_id: 1,
  siteid: 1,
  catid: 1,
  sequenceno: 1,
  pin: 1,
  pidno: 1,
  eventid: 1,
  associatedsiteid: 1,
  participant_id: 1,
  participantid: 1,
  questionid: 1,
  parentid: 1,
  ownerid: 1,
  contactid: 1,
  completorid: 1,
  aec_id: 1,
  lat: 1,
  latdeg: 1,
  latmin: 1,
  latsec: 1,
  lon: 1,
  londeg: 1,
  lonmin: 1,
  lonsec: 1,
  regdate: new Date(),
  eventdate: new Date(),
  approval_date: new Date(),
  moddate: new Date(),
  tombdate: new Date(),
  effectivedate: new Date(),
  enddate: new Date(),
  datenoted: new Date(),
  date_completed: new Date(),
  expirydate: new Date(),
  datecompleted: new Date(),
  datereceived: new Date(),
  datelocalauthority: new Date(),
  dateregistrar: new Date(),
  datedecision: new Date(),
  dateentered: new Date(),
  submissiondate: new Date(),
  documentdate: new Date(),
};

export const requestTestData = {
  docid: 2,
  site_id: 1,
  siteid: 1,
  catid: 1,
  sequenceno: 1,
  pin: 1,
  pidno: 1,
  eventid: 1,
  associatedsiteid: 1,
  participant_id: 1,
  participantid: 1,
  questionid: 1,
  parentid: 1,
  ownerid: 1,
  contactid: 1,
  completorid: 1,
  aec_id: 1,
  lat: 1,
  latdeg: 1,
  latmin: 1,
  latsec: 1,
  lon: 1,
  londeg: 1,
  lonmin: 1,
  lonsec: 1,
  regdate: new Date().toString(),
  eventdate: new Date().toString(),
  approval_date: new Date().toString(),
  moddate: new Date().toString(),
  tombdate: new Date().toString(),
  effectivedate: new Date().toString(),
  enddate: new Date().toString(),
  datenoted: new Date().toString(),
  date_completed: new Date().toString(),
  expirydate: new Date().toString(),
  datecompleted: new Date().toString(),
  datereceived: new Date().toString(),
  datelocalauthority: new Date().toString(),
  dateregistrar: new Date().toString(),
  datedecision: new Date().toString(),
  dateentered: new Date().toString(),
  submissiondate: new Date().toString(),
  documentdate: new Date().toString(),
};

export const testTemplateData = {
  submissionId: 'f5f186a6-0716-4a5a-9a2e-8343a9d55d42',
  formVersionId: 1,
  confirmationId: 'F5F186A6',
  createdBy: 'nothuman@fake',
  createdAt: '2020-10-05T21:14:15.677Z',
  updatedBy: null,
  updatedAt: '2020-10-05T21:14:15.316Z',
  deleted: false,
  attestation: {
    attestationId: '9923c4ec-2d94-4ca6-94de-f5d4e6545033',
    submissionId: 'f5f186a6-0716-4a5a-9a2e-8343a9d55d42',
    guidelinesRead: false,
    assessmentCompleted: false,
    developedPlan: false,
    protectionSignage: false,
    workerContactPersonnel: false,
    commonAreaDistancing: false,
    sleepingAreaType: 'SINGLE',
    sharedSleepingPerRoom: 1,
    sharedSleepingDistancing: false,
    selfIsolateUnderstood: false,
    selfIsolateAccommodation: false,
    laundryServices: false,
    wasteManagementGloves: false,
    wasteManagementSchedule: false,
    wasteManagementBags: false,
    handWashingStations: false,
    handWashingSoapWater: false,
    handWashingWaterless: false,
    handWashingPaperTowels: false,
    handWashingSignage: false,
    distancingMaintained: false,
    distancingFaceShields: false,
    disinfectingSchedule: false,
    educationSignage: false,
    educationContactPersonnel: false,
    transportationSingleOccupant: false,
    transportationBusesVans: false,
    transportationTrucksCars: false,
    transportationHelicopter: false,
    transportationTravelPod: true,
    transportationCleaningDistancing: true,
    trainingCovid19: false,
    trainingEtiquette: false,
    trainingLocations: false,
    trainingFirstAid: false,
    trainingReporting: false,
    mealsDistancing: false,
    mealsDishware: true,
    mealsDishwashing: true,
    infectionSeparation: false,
    infectionSymptoms: false,
    infectionHeathLinkBC: false,
    infectionSanitization: false,
    infectionAccommodation: false,
    infectedFeeding: false,
    infectedHousekeeping: false,
    infectedWaste: true,
    certifyAccurateInformation: true,
    agreeToInspection: true,
    createdBy: 'public',
    createdAt: '2020-10-05T21:14:15.866Z',
    updatedBy: null,
    updatedAt: '2020-10-05T21:14:15.316Z',
  },
  location: {
    locationId: 197,
    submissionId: 'f5f186a6-0716-4a5a-9a2e-8343a9d55d42',
    startDate: '2020-05-22',
    endDate: '2020-05-29',
    city: 'Prince George',
    cityLatitude: null,
    cityLongitude: null,
    mineNumber: '1234567',
    permitNumber: '',
    numberOfWorkers: 20,
    accTents: true,
    tentDetails: 'Down the road 10km',
    accMotel: true,
    motelName: 'Motel 6',
    motelAddressLine1: '456 Some St',
    motelAddressLine2: '',
    motelCity: 'Prince George',
    motelProvince: 'BC',
    motelPostalCode: 'PGP GPG',
    accWorkersHome: true,
    createdBy: 'public',
    createdAt: '2020-10-05T21:14:15.867Z',
    updatedBy: null,
    updatedAt: '2020-10-05T21:14:15.316Z',
  },
  business: {
    businessId: 197,
    submissionId: 'f5f186a6-0716-4a5a-9a2e-8343a9d55d42',
    name: 'LTO SOFTWARE CONSULTING INC.',
    orgBookId: '',
    addressLine1: '123 Fake st',
    addressLine2: 'West',
    city: 'Victoria',
    province: 'BC',
    postalCode: 'VXX 2YY',
    createdBy: 'public',
    createdAt: '2020-10-05T21:14:15.866Z',
    updatedBy: null,
    updatedAt: '2020-10-05T21:14:15.316Z',
  },
  contacts: [
    {
      contactId: 228,
      submissionId: 'f5f186a6-0716-4a5a-9a2e-8343a9d55d42',
      contactType: 'PRIMARY',
      firstName: 'Lucas',
      lastName: "O'Neil",
      phone1: '555-555-5555',
      phone2: '777-777-7777',
      email: 'fake@email.ccc',
      createdBy: 'public',
      createdAt: '2020-10-05T21:14:15.866Z',
      updatedBy: null,
      updatedAt: '2020-10-05T21:14:15.316Z',
    },
    {
      contactId: 229,
      submissionId: 'f5f186a6-0716-4a5a-9a2e-8343a9d55d42',
      contactType: 'COVID_COORDINATOR',
      firstName: 'Jane',
      lastName: 'Smith',
      phone1: '666-666-6666',
      phone2: '',
      email: 'no@yes.com',
      createdBy: 'public',
      createdAt: '2020-10-05T21:14:15.866Z',
      updatedBy: null,
      updatedAt: '2020-10-05T21:14:15.316Z',
    },
  ],
  responsibilityLink: {
    link: 'https://www.worksafebc.com/en/covid-19/bcs-four-step-restart',
    text: "BC's Restart: Communicable disease prevention",
  },
};

export const testTemplate: string =
  'PCFET0NUWVBFIGh0bWw+CjxodG1sPgo8aGVhZD4KICA8bWV0YSBodHRwLWVxdWl2PSJjb250ZW50LXR5cGUiIGNvbnRlbnQ9InRleHQvaHRtbDsgY2hhcnNldD11dGYtOCI+CiAgPG1ldGEgbmFtZT0iR2VuZXJhdG9yIiBjb250ZW50PSJNaWNyb3NvZnQgV29yZCAxNSAoZmlsdGVyZWQpIj4KICA8c3R5bGU+CiAgICA8IS0tCiAgICAvKiBGb250IERlZmluaXRpb25zICovCiAgICBAZm9udC1mYWNlCiAgICB7Zm9udC1mYW1pbHk6SGVsdmV0aWNhOwogICAgICBwYW5vc2UtMTowIDAgMCAwIDAgMCAwIDAgMCAwO30KICAgIEBmb250LWZhY2UKICAgIHtmb250LWZhbWlseTpXaW5nZGluZ3M7CiAgICAgIHBhbm9zZS0xOjUgMCAwIDAgMCAwIDAgMCAwIDA7fQogICAgQGZvbnQtZmFjZQogICAge2ZvbnQtZmFtaWx5OiJDYW1icmlhIE1hdGgiOwogICAgICBwYW5vc2UtMToyIDQgNSAzIDUgNCA2IDMgMiA0O30KICAgIEBmb250LWZhY2UKICAgIHtmb250LWZhbWlseTpDYWxpYnJpOwogICAgICBwYW5vc2UtMToyIDE1IDUgMiAyIDIgNCAzIDIgNDt9CiAgICAvKiBTdHlsZSBEZWZpbml0aW9ucyAqLwogICAgcC5Nc29Ob3JtYWwsIGxpLk1zb05vcm1hbCwgZGl2Lk1zb05vcm1hbAogICAge21hcmdpbjowY207CiAgICAgIG1hcmdpbi1ib3R0b206LjAwMDFwdDsKICAgICAgZm9udC1zaXplOjEwLjBwdDsKICAgICAgZm9udC1mYW1pbHk6IkFyaWFsIixzYW5zLXNlcmlmO30KICAgIGgxCiAgICB7bXNvLXN0eWxlLWxpbms6IkhlYWRpbmcgMSBDaGFyIjsKICAgICAgbWFyZ2luLXRvcDoxMi4wcHQ7CiAgICAgIG1hcmdpbi1yaWdodDowY207CiAgICAgIG1hcmdpbi1ib3R0b206Ni4wcHQ7CiAgICAgIG1hcmdpbi1sZWZ0OjBjbTsKICAgICAgbGluZS1oZWlnaHQ6MTUwJTsKICAgICAgcGFnZS1icmVhay1hZnRlcjphdm9pZDsKICAgICAgYmFja2dyb3VuZDp3aGl0ZTsKICAgICAgZm9udC1zaXplOjE0LjBwdDsKICAgICAgZm9udC1mYW1pbHk6IkFyaWFsIixzYW5zLXNlcmlmOwogICAgICBjb2xvcjojMkY1NDk2OwogICAgICBmb250LXdlaWdodDpub3JtYWw7fQogICAgaDIKICAgIHttc28tc3R5bGUtbGluazoiSGVhZGluZyAyIENoYXIiOwogICAgICBtYXJnaW4tdG9wOjYuMHB0OwogICAgICBtYXJnaW4tcmlnaHQ6MGNtOwogICAgICBtYXJnaW4tYm90dG9tOjYuMHB0OwogICAgICBtYXJnaW4tbGVmdDowY207CiAgICAgIGxpbmUtaGVpZ2h0OjE1MCU7CiAgICAgIHBhZ2UtYnJlYWstYWZ0ZXI6YXZvaWQ7CiAgICAgIGJhY2tncm91bmQ6d2hpdGU7CiAgICAgIGZvbnQtc2l6ZToxMi4wcHQ7CiAgICAgIGZvbnQtZmFtaWx5OiJBcmlhbCIsc2Fucy1zZXJpZjsKICAgICAgY29sb3I6IzJGNTQ5NjsKICAgICAgZm9udC13ZWlnaHQ6bm9ybWFsO30KICAgIHNwYW4uSGVhZGluZzFDaGFyCiAgICB7bXNvLXN0eWxlLW5hbWU6IkhlYWRpbmcgMSBDaGFyIjsKICAgICAgbXNvLXN0eWxlLWxpbms6IkhlYWRpbmcgMSI7CiAgICAgIGZvbnQtZmFtaWx5OiJDYWxpYnJpIExpZ2h0IixzYW5zLXNlcmlmOwogICAgICBjb2xvcjojMkY1NDk2OwogICAgICBiYWNrZ3JvdW5kOndoaXRlO30KICAgIHNwYW4uSGVhZGluZzJDaGFyCiAgICB7bXNvLXN0eWxlLW5hbWU6IkhlYWRpbmcgMiBDaGFyIjsKICAgICAgbXNvLXN0eWxlLWxpbms6IkhlYWRpbmcgMiI7CiAgICAgIGZvbnQtZmFtaWx5OiJDYWxpYnJpIExpZ2h0IixzYW5zLXNlcmlmOwogICAgICBjb2xvcjojMkY1NDk2OwogICAgICBiYWNrZ3JvdW5kOndoaXRlO30KICAgIHAuTm9ybWFsMSwgbGkuTm9ybWFsMSwgZGl2Lk5vcm1hbDEKICAgIHttc28tc3R5bGUtbmFtZTpOb3JtYWwxOwogICAgICBtYXJnaW46MGNtOwogICAgICBtYXJnaW4tYm90dG9tOi4wMDAxcHQ7CiAgICAgIGZvbnQtc2l6ZToxMC4wcHQ7CiAgICAgIGZvbnQtZmFtaWx5OiJBcmlhbCIsc2Fucy1zZXJpZjt9CiAgICAuTXNvQ2hwRGVmYXVsdAogICAge2ZvbnQtZmFtaWx5OiJDYWxpYnJpIixzYW5zLXNlcmlmO30KICAgIEBwYWdlIFdvcmRTZWN0aW9uMQogICAge3NpemU6NjEyLjBwdCA3OTIuMHB0OwogICAgICBtYXJnaW46NzIuMHB0IDcyLjBwdCA3Mi4wcHQgNzIuMHB0O30KICAgIGRpdi5Xb3JkU2VjdGlvbjEKICAgIHtwYWdlOldvcmRTZWN0aW9uMTt9CiAgICAvKiBMaXN0IERlZmluaXRpb25zICovCiAgICBvbAogICAge21hcmdpbi1ib3R0b206MGNtO30KICAgIHVsCiAgICB7bWFyZ2luLWJvdHRvbTowY207fQogICAgLS0+CiAgPC9zdHlsZT4gPC9oZWFkPgo8Ym9keSBsaW5rPSJibHVlIiBsYW5nPSJFTi1DQSIgdmxpbms9IiM5NTRGNzIiPgo8ZGl2IGNsYXNzPSJXb3JkU2VjdGlvbjEiPgogIDx0YWJsZSBjbGFzcz0iTXNvVGFibGVHcmlkIiBzdHlsZT0id2lkdGg6NDczLjM1cHQ7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2JvcmRlcjpub25lIgogICAgICAgICBjZWxsc3BhY2luZz0iMCIKICAgICAgICAgY2VsbHBhZGRpbmc9IjAiCiAgICAgICAgIGJvcmRlcj0iMCIKICAgICAgICAgd2lkdGg9IjYzMSI+CiAgICA8dGJvZHk+CiAgICA8dHIgc3R5bGU9ImhlaWdodDozMi44NXB0OyI+CiAgICAgIDx0ZCBzdHlsZT0iYm9yZGVyOiBtZWRpdW0gbm9uZTsgcGFkZGluZzogMGNtIDUuNHB0OyBoZWlnaHQ6IDMyLjg1cHQ7IHRleHQtYWxpZ246IGNlbnRlcjtiYWNrZ3JvdW5kOiMwMDMzNjY7IgogICAgICAgICAgd2lkdGg9IjU1OCIKICAgICAgICAgIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTXNvTm9ybWFsIiBzdHlsZT0ibWFyZ2luLXRvcDogNnB0OyI+PGI+PHNwYW4gc3R5bGU9ImZvbnQtc2l6ZToyNC4wcHQ7CiAgZm9udC1mYW1pbHk6JnF1b3Q7Q2FsaWJyaSZxdW90OyxzYW5zLXNlcmlmO2NvbG9yOiNGRkYiPk1pbmVzIE9wZXJhdG9yCiAgICAgICAgICAgICAgICAgICAgU2NyZWVuaW5nPC9zcGFuPjwvYj48L3A+CiAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiPiZuYnNwOzwvcD4KICA8aDI+Qnkgc3VibWl0dGluZyB0aGlzIGZvcm0sJm5ic3A7IHlvdSBhcmUgc3ViamVjdCB0byBhIHNpdGUgaW5zcGVjdGlvbjo8L2gyPgogIDxwIGNsYXNzPSJOb3JtYWwxIiBzdHlsZT0ibWFyZ2luLWxlZnQ6MzYuMHB0OyI+VGhlIFByb3ZpbmNlIG9mIEJDIHdpbGwgdXNlCiAgICB0aGUgaW5mb3JtYXRpb24geW91IHByb3ZpZGUgdGhyb3VnaCB0aGlzIG9ubGluZSBmb3JtIGZvciB0aGUgc2l0ZQogICAgaW5zcGVjdGlvbiB0aGF0IGRldGVybWluZXMgeW91ciBjb21wbGlhbmNlIHdpdGggdGhlIENPVklELTE5IEluZHVzdHJpYWwKICAgIENhbXBzIFByb3ZpbmNpYWwgSGVhbHRoIE9yZGVyLjwvcD4KICA8cCBjbGFzcz0iTm9ybWFsMSI+Jm5ic3A7PC9wPgogIDx0YWJsZSBjbGFzcz0iTXNvTm9ybWFsVGFibGUiIHN0eWxlPSJib3JkZXItY29sbGFwc2U6Y29sbGFwc2UiIGNlbGxzcGFjaW5nPSIwIgogICAgICAgICBjZWxscGFkZGluZz0iMCIKICAgICAgICAgYm9yZGVyPSIwIgogICAgICAgICB3aWR0aD0iNjIwIj4KICAgIDx0Ym9keT4KICAgIDx0ciBzdHlsZT0iaGVpZ2h0OjMwLjVwdCI+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MTQuMzVwdDtiYWNrZ3JvdW5kOiNGRkYyQ0M7cGFkZGluZzo1LjBwdCA1LjBwdCA1LjBwdCA1LjBwdDsKICBoZWlnaHQ6MzAuNXB0IiB3aWR0aD0iMTkiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+Jm5ic3A7PC9wPgogICAgICA8L3RkPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjQ1MS4wcHQ7YmFja2dyb3VuZDojRkZGMkNDO3BhZGRpbmc6CiAgNS4wcHQgNS4wcHQgNS4wcHQgNS4wcHQ7aGVpZ2h0OjMwLjVwdCIgd2lkdGg9IjYwMSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj48c3BhbiBzdHlsZT0iZm9udC1mYW1pbHk6SGVsdmV0aWNhO2NvbG9yOiMyRTMzMzgiPklmCiAgICAgICAgICAgICAgICAgIHlvdSBmYWlsIHRvIGNvbXBseSB3aXRoIHRoZXNlIHJlcXVpcmVtZW50cywgdGhlIFByb3ZpbmNpYWwKICAgICAgICAgICAgICAgICAgSGVhbHRoIE9mZmljZXIgb3JkZXIgZW5hYmxlcyB0aGUgYXV0aG9yaXR5IHRvIHRha2UgZW5mb3JjZW1lbnQKICAgICAgICAgICAgICAgICAgYWN0aW9uIGFnYWluc3QgeW91IHVuZGVyIFBhcnQgNCwgRGl2aXNpb24gNiBvZiB0aGUgUHVibGljCiAgICAgICAgICAgICAgICAgIEhlYWx0aCBBY3QuPC9zcGFuPjwvcD4KICAgICAgICA8YnI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPkZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IHlvdXIgcmVzcG9uc2liaWxpdGllcyBhcyBhbgogICAgICAgICAgaW5kdXN0cmlhbCBjYW1wIG9wZXJhdG9yLCBwbGVhc2Ugc2VlIDxicj4KICAgICAgICA8YSBocmVmPSJ7ZC5yZXNwb25zaWJpbGl0eUxpbmsubGlua30iPntkLnJlc3BvbnNpYmlsaXR5TGluay50ZXh0fTwvYT48L3A+CiAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIDxoMT4xLiBZb3VyIGJ1c2luZXNzIGNvbnRhY3QgaW5mb3JtYXRpb248L2gxPgogIDxwIGNsYXNzPSJOb3JtYWwxIj5SZWdpc3RlcmVkIEJ1c2luZXNzIE5hbWU6IHtkLmJ1c2luZXNzLm5hbWV9PC9wPgogIDxwIGNsYXNzPSJOb3JtYWwxIj5NaW5lIE51bWJlcjoge2QubG9jYXRpb24ubWluZU51bWJlcn08L3A+CiAgPHAgY2xhc3M9Ik5vcm1hbDEiPk1pbmVzIEFjdCBQZXJtaXQ6IHtkLmxvY2F0aW9uLnBlcm1pdE51bWJlcn08L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+Jm5ic3A7PC9wPgogIDxoMj5QcmltYXJ5IENvbnRhY3Q8L2gyPgogIDx0YWJsZSBjbGFzcz0iTXNvVGFibGVHcmlkIiBzdHlsZT0ibWFyZ2luLWxlZnQ6MzAuNnB0O2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTtib3JkZXI6bm9uZSIKICAgICAgICAgY2VsbHNwYWNpbmc9IjAiCiAgICAgICAgIGNlbGxwYWRkaW5nPSIwIgogICAgICAgICBib3JkZXI9IjAiPgogICAgPHRib2R5PgogICAgPHRyPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjE4My43NXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjI0NSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj5GaXJzdCBOYW1lPC9wPgogICAgICA8L3RkPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjI0OC4yNXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjMzMSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj57ZC5jb250YWN0c1tpLCBjb250YWN0VHlwZSA9ICdQUklNQVJZJ10uZmlyc3ROYW1lfTwvcD4KICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MTgzLjc1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMjQ1IiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPkxhc3QgTmFtZTwvcD4KICAgICAgPC90ZD4KICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoyNDguMjVwdDtwYWRkaW5nOjBjbSA1LjRwdCAwY20gNS40cHQiIHdpZHRoPSIzMzEiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+e2QuY29udGFjdHNbaSwgY29udGFjdFR5cGUgPSAnUFJJTUFSWSddLmxhc3ROYW1lfTwvcD4KICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MTgzLjc1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMjQ1IiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPlBob25lIE51bWJlcjwvcD4KICAgICAgPC90ZD4KICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoyNDguMjVwdDtwYWRkaW5nOjBjbSA1LjRwdCAwY20gNS40cHQiIHdpZHRoPSIzMzEiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+e2QuY29udGFjdHNbaSwgY29udGFjdFR5cGUgPSAnUFJJTUFSWSddLnBob25lMX08L3A+CiAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjE4My43NXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjI0NSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj5BbHRlcm5hdGl2ZSBQaG9uZSBOdW1iZXIgKG9wdGlvbmFsKTwvcD4KICAgICAgPC90ZD4KICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoyNDguMjVwdDtwYWRkaW5nOjBjbSA1LjRwdCAwY20gNS40cHQiIHdpZHRoPSIzMzEiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+e2QuY29udGFjdHNbaSwgY29udGFjdFR5cGUgPSAnUFJJTUFSWSddLnBob25lMn08L3A+CiAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjE4My43NXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjI0NSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj5FLW1haWwgQWRkcmVzczwvcD4KICAgICAgPC90ZD4KICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoyNDguMjVwdDtwYWRkaW5nOjBjbSA1LjRwdCAwY20gNS40cHQiIHdpZHRoPSIzMzEiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+e2QuY29udGFjdHNbaSwgY29udGFjdFR5cGUgPSAnUFJJTUFSWSddLmVtYWlsfTwvcD4KICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgPHAgY2xhc3M9Ik5vcm1hbDEiPiZuYnNwOzwvcD4KICA8aDI+QnVzaW5lc3MgQWRkcmVzczwvaDI+CiAgPHRhYmxlIGNsYXNzPSJNc29UYWJsZUdyaWQiIHN0eWxlPSJtYXJnaW4tbGVmdDozMC42cHQ7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2JvcmRlcjpub25lIgogICAgICAgICBjZWxsc3BhY2luZz0iMCIKICAgICAgICAgY2VsbHBhZGRpbmc9IjAiCiAgICAgICAgIGJvcmRlcj0iMCI+CiAgICA8dGJvZHk+CiAgICA8dHI+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MTgzLjc1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMjQ1IiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPkFkZHJlc3MgbGluZSAxPC9wPgogICAgICA8L3RkPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjI0OC4yNXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjMzMSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj57ZC5idXNpbmVzcy5hZGRyZXNzTGluZTF9PC9wPgogICAgICA8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoxODMuNzVwdDtwYWRkaW5nOjBjbSA1LjRwdCAwY20gNS40cHQiIHdpZHRoPSIyNDUiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+QWRkcmVzcyBsaW5lIDIgKG9wdGlvbmFsKTwvcD4KICAgICAgPC90ZD4KICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoyNDguMjVwdDtwYWRkaW5nOjBjbSA1LjRwdCAwY20gNS40cHQiIHdpZHRoPSIzMzEiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+e2QuYnVzaW5lc3MuYWRkcmVzc0xpbmUyfTwvcD4KICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MTgzLjc1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMjQ1IiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPkNpdHk8L3A+CiAgICAgIDwvdGQ+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MjQ4LjI1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMzMxIiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPntkLmJ1c2luZXNzLmNpdHl9PC9wPgogICAgICA8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoxODMuNzVwdDtwYWRkaW5nOjBjbSA1LjRwdCAwY20gNS40cHQiIHdpZHRoPSIyNDUiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+UHJvdmluY2U8L3A+CiAgICAgIDwvdGQ+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MjQ4LjI1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMzMxIiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPntkLmJ1c2luZXNzLnByb3ZpbmNlfTwvcD4KICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MTgzLjc1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMjQ1IiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPlBvc3RhbCBjb2RlPC9wPgogICAgICA8L3RkPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjI0OC4yNXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjMzMSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj57ZC5idXNpbmVzcy5wb3N0YWxDb2RlfTwvcD4KICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgPHAgY2xhc3M9Ik5vcm1hbDEiPiZuYnNwOzwvcD4KICA8aDI+Q09WSUQtMTkgQ29vcmRpbmF0b3I8L2gyPgogIDxwIGNsYXNzPSJOb3JtYWwxIj5JdCBpcyBpbXBvcnRhbnQgdGhhdCB5b3VyIENvLU9yZGluYXRvciBjb250cmlidXRlcyB0bwogICAgYW5kIHVuZGVyc3RhbmRzIHRoZSBQcm90b2NvbCB0aGF0IHlvdSBhcmUgcmVxdWlyZWQgdG8gY3JlYXRlIHRvIHByZXZlbnQKICAgIGFuZCBjb250cm9sIHRoZSB0cmFuc21pc3Npb24gb2YgQ09WSUQtMTkuPC9wPgogIDxwIGNsYXNzPSJOb3JtYWwxIj4mbmJzcDs8L3A+CiAgPHRhYmxlIGNsYXNzPSJNc29UYWJsZUdyaWQiIHN0eWxlPSJtYXJnaW4tbGVmdDozMC42cHQ7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2JvcmRlcjpub25lIgogICAgICAgICBjZWxsc3BhY2luZz0iMCIKICAgICAgICAgY2VsbHBhZGRpbmc9IjAiCiAgICAgICAgIGJvcmRlcj0iMCI+CiAgICA8dGJvZHk+CiAgICA8dHI+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MTgzLjc1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMjQ1IiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPkZpcnN0IE5hbWU8L3A+CiAgICAgIDwvdGQ+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MjQ4LjI1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMzMxIiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPntkLmNvbnRhY3RzW2ksIGNvbnRhY3RUeXBlID0gJ0NPVklEX0NPT1JESU5BVE9SJ10uZmlyc3ROYW1lfTwvcD4KICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MTgzLjc1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMjQ1IiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPkxhc3QgTmFtZTwvcD4KICAgICAgPC90ZD4KICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoyNDguMjVwdDtwYWRkaW5nOjBjbSA1LjRwdCAwY20gNS40cHQiIHdpZHRoPSIzMzEiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+e2QuY29udGFjdHNbaSwgY29udGFjdFR5cGUgPSAnQ09WSURfQ09PUkRJTkFUT1InXS5sYXN0TmFtZX08L3A+CiAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjE4My43NXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjI0NSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj5DZWxsIFBob25lPC9wPgogICAgICA8L3RkPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjI0OC4yNXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjMzMSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj57ZC5jb250YWN0c1tpLCBjb250YWN0VHlwZSA9ICdDT1ZJRF9DT09SRElOQVRPUiddLnBob25lMX08L3A+CiAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjE4My43NXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjI0NSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj5BbHRlcm5hdGl2ZSBQaG9uZSBOdW1iZXIgKG9wdGlvbmFsKTwvcD4KICAgICAgPC90ZD4KICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoyNDguMjVwdDtwYWRkaW5nOjBjbSA1LjRwdCAwY20gNS40cHQiIHdpZHRoPSIzMzEiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+e2QuY29udGFjdHNbaSwgY29udGFjdFR5cGUgPSAnQ09WSURfQ09PUkRJTkFUT1InXS5waG9uZTJ9PC9wPgogICAgICA8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoxODMuNzVwdDtwYWRkaW5nOjBjbSA1LjRwdCAwY20gNS40cHQiIHdpZHRoPSIyNDUiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+RS1tYWlsIEFkZHJlc3MgKFByaW1hcnkgQ29udGFjdCk8L3A+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPiZuYnNwOzwvcD4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+Jm5ic3A7PC9wPgogICAgICA8L3RkPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjI0OC4yNXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjMzMSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj57ZC5jb250YWN0c1tpLCBjb250YWN0VHlwZSA9ICdDT1ZJRF9DT09SRElOQVRPUiddLmVtYWlsfTwvcD4KICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgPGgyPkFjY29tbW9kYXRpb24gTG9jYXRpb248L2gyPgogIDxwIGNsYXNzPSJOb3JtYWwxIj5Qcm92aWRlIHlvdXIgYWNjb21tb2RhdGlvbiBkZXRhaWxzPC9wPgogIDxwIGNsYXNzPSJOb3JtYWwxIj4mbmJzcDs8L3A+CiAgPHRhYmxlIGNsYXNzPSJNc29UYWJsZUdyaWQiIHN0eWxlPSJtYXJnaW4tbGVmdDozNS4ycHQ7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2JvcmRlcjpub25lIgogICAgICAgICBjZWxsc3BhY2luZz0iMCIKICAgICAgICAgY2VsbHBhZGRpbmc9IjAiCiAgICAgICAgIGJvcmRlcj0iMCI+CiAgICA8dGJvZHk+CiAgICA8dHI+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MTkxLjM1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMjU1IiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPk9wZXJhdGlvbiBTdGFydCBEYXRlPC9wPgogICAgICA8L3RkPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjI0MC42NXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjMyMSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj57ZC5sb2NhdGlvbi5zdGFydERhdGV9PC9wPgogICAgICA8L3RkPgogICAgICA8dGQgc3R5bGU9ImJvcmRlcjpub25lO3BhZGRpbmc6MGNtIDBjbSAwY20gMGNtIiB3aWR0aD0iMCI+CiAgICAgICAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+Jm5ic3A7PC9wPgogICAgICA8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoxOTEuMzVwdDtwYWRkaW5nOjBjbSA1LjRwdCAwY20gNS40cHQiIHdpZHRoPSIyNTUiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+T3BlcmF0aW9uIEVuZCBEYXRlPC9wPgogICAgICA8L3RkPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjI0MC42NXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjMyMSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj57ZC5sb2NhdGlvbi5lbmREYXRlfTwvcD4KICAgICAgPC90ZD4KICAgICAgPHRkIHN0eWxlPSJib3JkZXI6bm9uZTtwYWRkaW5nOjBjbSAwY20gMGNtIDBjbSIgd2lkdGg9IjAiPgogICAgICAgIDxwIGNsYXNzPSJNc29Ob3JtYWwiPiZuYnNwOzwvcD4KICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MTkxLjM1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMjU1IiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPkNsb3Nlc3QgQ29tbXVuaXR5PC9wPgogICAgICA8L3RkPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjI0MC42NXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjMyMSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj57ZC5sb2NhdGlvbi5jaXR5fTwvcD4KICAgICAgPC90ZD4KICAgICAgPHRkIHN0eWxlPSJib3JkZXI6bm9uZTtwYWRkaW5nOjBjbSAwY20gMGNtIDBjbSIgd2lkdGg9IjAiPgogICAgICAgIDxwIGNsYXNzPSJNc29Ob3JtYWwiPiZuYnNwOzwvcD4KICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MTkxLjM1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMjU1IiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+TnVtYmVyIG9mIFdvcmtlcnM8L3A+CiAgICAgIDwvdGQ+CiAgICAgIDx0ZCBjb2xzcGFuPSIyIiBzdHlsZT0id2lkdGg6MjQwLjk1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMzIxIgogICAgICAgICAgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJNc29Ob3JtYWwiPntkLmxvY2F0aW9uLm51bWJlck9mV29ya2Vyc308L3A+CiAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPC90Ym9keT4KICA8L3RhYmxlPgogIDxwIGNsYXNzPSJOb3JtYWwxIj4mbmJzcDs8L3A+CiAgPHAgY2xhc3M9Ik5vcm1hbDEiPjxiPjxzcGFuIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QubG9jYXRpb24uYWNjVGVudHM6aWZFUSh0cnVlKTpzaG93KCdZZXMnKTplbHNlU2hvdygnX19fJyl9XQogICAgICAgICAgICA8L3NwYW4+PC9iPlRlbnRzIG5lYXIgd29ya3NpdGU8L3A+CiAgPHAgY2xhc3M9Ik5vcm1hbDEiPiZuYnNwOzwvcD4KICA8cCBjbGFzcz0iTm9ybWFsMSI+RGVzY3JpcHRpb24gb2YgTG9jYXRpb246IHtkLmxvY2F0aW9uLnRlbnREZXRhaWxzfTwvcD4KICA8cCBjbGFzcz0iTm9ybWFsMSI+Jm5ic3A7PC9wPgogIDxwIGNsYXNzPSJOb3JtYWwxIj48Yj48c3BhbiBzdHlsZT0iY29sb3I6IzQ0NzJDNCI+W3tkLmxvY2F0aW9uLmFjY01vdGVsOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV08L3NwYW4+PC9iPgogICAgTW90ZWwvSG90ZWwgaW4gdG93bjwvcD4KICA8cCBjbGFzcz0iTm9ybWFsMSI+Jm5ic3A7PC9wPgogIDx0YWJsZSBjbGFzcz0iTXNvVGFibGVHcmlkIiBzdHlsZT0ibWFyZ2luLWxlZnQ6MzUuMnB0O2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTtib3JkZXI6bm9uZSIKICAgICAgICAgY2VsbHNwYWNpbmc9IjAiCiAgICAgICAgIGNlbGxwYWRkaW5nPSIwIgogICAgICAgICBib3JkZXI9IjAiPgogICAgPHRib2R5PgogICAgPHRyPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjE5MS4zNXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjI1NSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj5Nb3RlbCBOYW1lPC9wPgogICAgICA8L3RkPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjI0MC42NXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjMyMSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj57ZC5sb2NhdGlvbi5tb3RlbE5hbWV9PC9wPgogICAgICA8L3RkPgogICAgPC90cj4KICAgIDx0cj4KICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoxOTEuMzVwdDtwYWRkaW5nOjBjbSA1LjRwdCAwY20gNS40cHQiIHdpZHRoPSIyNTUiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+QWRkcmVzcyBsaW5lIDE8L3A+CiAgICAgIDwvdGQ+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MjQwLjY1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMzIxIiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPntkLmxvY2F0aW9uLm1vdGVsQWRkcmVzc0xpbmUxfTwvcD4KICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MTkxLjM1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMjU1IiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPkFkZHJlc3MgbGluZSAyIChvcHRpb25hbCk8L3A+CiAgICAgIDwvdGQ+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MjQwLjY1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMzIxIiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPntkLmxvY2F0aW9uLm1vdGVsQWRkcmVzc0xpbmUyfTwvcD4KICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8dHI+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MTkxLjM1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMjU1IiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPkNpdHk8L3A+CiAgICAgIDwvdGQ+CiAgICAgIDx0ZCBzdHlsZT0id2lkdGg6MjQwLjY1cHQ7cGFkZGluZzowY20gNS40cHQgMGNtIDUuNHB0IiB3aWR0aD0iMzIxIiB2YWxpZ249InRvcCI+CiAgICAgICAgPHAgY2xhc3M9Ik5vcm1hbDEiPntkLmxvY2F0aW9uLm1vdGVsQ2l0eX08L3A+CiAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjE5MS4zNXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjI1NSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj5Qcm92aW5jZTwvcD4KICAgICAgPC90ZD4KICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoyNDAuNjVwdDtwYWRkaW5nOjBjbSA1LjRwdCAwY20gNS40cHQiIHdpZHRoPSIzMjEiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+e2QubG9jYXRpb24ubW90ZWxQcm92aW5jZX08L3A+CiAgICAgIDwvdGQ+CiAgICA8L3RyPgogICAgPHRyPgogICAgICA8dGQgc3R5bGU9IndpZHRoOjE5MS4zNXB0O3BhZGRpbmc6MGNtIDUuNHB0IDBjbSA1LjRwdCIgd2lkdGg9IjI1NSIgdmFsaWduPSJ0b3AiPgogICAgICAgIDxwIGNsYXNzPSJOb3JtYWwxIj5Qb3N0YWwgY29kZTwvcD4KICAgICAgPC90ZD4KICAgICAgPHRkIHN0eWxlPSJ3aWR0aDoyNDAuNjVwdDtwYWRkaW5nOjBjbSA1LjRwdCAwY20gNS40cHQiIHdpZHRoPSIzMjEiIHZhbGlnbj0idG9wIj4KICAgICAgICA8cCBjbGFzcz0iTm9ybWFsMSI+e2QubG9jYXRpb24ubW90ZWxQb3N0YWxDb2RlfTwvcD4KICAgICAgPC90ZD4KICAgIDwvdHI+CiAgICA8L3Rib2R5PgogIDwvdGFibGU+CiAgPHAgY2xhc3M9Ik5vcm1hbDEiPiZuYnNwOzwvcD4KICA8cCBjbGFzcz0iTm9ybWFsMSI+PGI+PHNwYW4gc3R5bGU9ImNvbG9yOiM0NDcyQzQiPlt7ZC5sb2NhdGlvbi5hY2NXb3JrZXJzSG9tZTppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dPC9zcGFuPjwvYj4KICAgIFdvcmtlcuKAmXMgaG9tZSBpbiBjb21tdW5pdHk8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+Jm5ic3A7PC9wPgogIDxoMT4yLiBCZWZvcmUgb3BlcmF0aW9ucyBiZWdpbiwgcGxlYXNlIGNoZWNrIGFsbCB0aGF0IGFwcGx5OjwvaDE+CiAgPGgyPjEuIENPVklELTE5IEluZm9ybWF0aW9uPC9oMj4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj5JbmR1c3RyaWFsIENhbXAgb3BlcmF0b3JzIG5lZWQgdG8gbWFrZSB3b3JrZXJzIGF3YXJlCiAgICBvZiB0aGUgcmlza3Mgb2YgQ09WSUQtMTkgYW5kIGJlIHByZXBhcmVkIGlmIHdvcmtlcnMgaGF2ZSBxdWVzdGlvbnMgYWJvdXQKICAgIENPVklELTE5LjwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj4mbmJzcDs8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24ucHJvdGVjdGlvblNpZ25hZ2U6aWZFUSh0cnVlKTpzaG93KCdZZXMnKTplbHNlU2hvdygnX19fJyl9XQogICAgICAgICAgICA8L3NwYW4+PC9iPkkgaGF2ZSBzaWduYWdlIGluIHBsYWNlIGluIHRoZSBhcHByb3ByaWF0ZSBsYW5ndWFnZSBvbgogICAgaG93IHdvcmtlcnMgY2FuIHByb3RlY3QgdGhlbXNlbHZlcyBmcm9tIENPVklELTE5LjwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIiBzdHlsZT0ibWFyZ2luLWxlZnQ6MzUuNDVwdDt0ZXh0LWluZGVudDotMzUuNDVwdCI+PGI+PHNwYW4KICAgICAgc3R5bGU9ImNvbG9yOiM0NDcyQzQiPlt7ZC5hdHRlc3RhdGlvbi53b3JrZXJDb250YWN0UGVyc29ubmVsOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5JIGhhdmUgc29tZW9uZSBpZGVudGlmaWVkIHRoYXQgd29ya2VycyBjYW4gZ28gdG8gaWYgdGhleQogICAgaGF2ZSBxdWVzdGlvbnMgb24gQ09WSUQtMTkuPC9wPgogIDxoMj4yLiBQcm92aWRlIHNhZmUgbG9kZ2luZyBhbmQgYWNjb21tb2RhdGlvbjogR2VuZXJhbCBXb3JrZXI8L2gyPgogIDxwIGNsYXNzPSJOb3JtYWwxIj5JbmR1c3RyaWFsIENhbXAgb3BlcmF0b3JzIG11c3QgYmUgYWJsZSB0byBwcm92aWRlCiAgICBhY2NvbW1vZGF0aW9ucyB0aGF0IG1pbmltaXplIGNyb3dkaW5nLCBzb2NpYWwgaW50ZXJhY3Rpb25zLCBhbmQgcHJvdmlkZQogICAgc3VmZmljaWVudCBwaHlzaWNhbCBkaXN0YW5jZSAoaW5kaXZpZHVhbCB0ZW50cyBvciBiZWRzIDJtIGFwYXJ0IGFuZAogICAgaGVhZC10by10b2UgaW4gc2hhcmVkIGFjY29tbW9kYXRpb25zKS48L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+Jm5ic3A7PC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiIHN0eWxlPSJtYXJnaW4tbGVmdDozNS40NXB0O3RleHQtaW5kZW50Oi0zNS40NXB0Ij48Yj48c3BhbgogICAgICBzdHlsZT0iY29sb3I6IzQ0NzJDNCI+W3tkLmF0dGVzdGF0aW9uLmNvbW1vbkFyZWFEaXN0YW5jaW5nOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5Db21tb24gYXJlYXMgYWxsb3cgcGh5c2ljYWwgZGlzdGFuY2luZyBvZiAybSAvIDZmdCBhdCBhbGwKICAgIHRpbWVzLjwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj4mbmJzcDs8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+RG8geW91IGhhdmUgaW5kaXZpZHVhbC9zaW5nbGUgYmVkcyBvciBzaGFyZWQgc2xlZXBpbmcKICAgIGFyZWFzPzwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj4mbmJzcDs8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+PGI+PHNwYW4gc3R5bGU9ImNvbG9yOiM0NDcyQzQiPlt7ZC5hdHRlc3RhdGlvbi5zbGVlcGluZ0FyZWFUeXBlOmlmRVEoJ1NJTkdMRScpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dPC9zcGFuPjwvYj4KICAgIEluZGl2aWR1YWwgQmVkcyBvciBTaW5nbGUgQmVkczwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj48Yj48c3BhbiBzdHlsZT0iY29sb3I6IzQ0NzJDNCI+W3tkLmF0dGVzdGF0aW9uLnNsZWVwaW5nQXJlYVR5cGU6aWZFUSgnU0hBUkVEJyk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpKX1dCiAgICAgICAgICAgIDwvc3Bhbj48L2I+U2hhcmVkIHNsZWVwaW5nIGFyZWFzPC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiPiZuYnNwOzwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj5Ib3cgbWFueSBwZW9wbGUgYXJlIGluIGEgcm9vbT88L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+e2QuYXR0ZXN0YXRpb24uc2hhcmVkU2xlZXBpbmdQZXJSb29tfTwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj4mbmJzcDs8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24uc2hhcmVkU2xlZXBpbmdEaXN0YW5jaW5nOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5CZWRzIGluIHRoZSBoZWFkLXRvLXRvZSBjb25maWd1cmF0aW9uIHdpdGggdGhlIDJtCiAgICBkaXN0YW5jZSBhcGFydC48L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+Jm5ic3A7PC9wPgogIDxoMj4zLiBTZWxmLWlzb2xhdGlvbiBzcGFjZSBpZiBhbnkgd29ya2VyIGNvbWVzIGRvd24gd2l0aCBDT1ZJRC0xOS1saWtlCiAgICBzeW1wdG9tczwvaDI+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24uc2VsZklzb2xhdGVVbmRlcnN0b29kOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5JIHVuZGVyc3RhbmQgd2hhdCBpcyBuZWVkZWQgZm9yIGEgcGVyc29uIHRvIHNlbGYtaXNvbGF0ZS48L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24uc2VsZklzb2xhdGVBY2NvbW1vZGF0aW9uOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5JIGhhdmUgc2VwYXJhdGUgYWNjb21tb2RhdGlvbiB0byBsZXQgYSB3b3JrZXIKICAgIHNlbGYtaXNvbGF0ZSBpbiBhIHNlcGFyYXRlIGFjY29tbW9kYXRpb24gdGhhbiBvdGhlciB3b3JrZXJzIG9yIGFycmFuZ2UKICAgIGZvciBzZXBhcmF0ZSBhY2NvbW1vZGF0aW9uLjwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj4mbmJzcDs8L3A+CiAgPGgyPjQuIE1ha2Ugc3VyZSBsYXVuZHJ5IGZhY2lsaXRpZXMgYXJlIGF2YWlsYWJsZSBhbmQgaGFuZGxlZCBzYWZlbHk8L2gyPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiPkxhdW5kcnkgbXVzdCBiZSBwZXJmb3JtZWQgcHJvcGVybHkgdG8gcmVkdWNlIHRoZSByaXNrCiAgICBvZiBkaXNlYXNlIHRyYW5zbWlzc2lvbiBvZiBDT1ZJRC0xOSwgaW5jbHVkaW5nIHVzaW5nIGhvdCB3YXRlciBmb3IKICAgIGxhdW5kcnkgbWFjaGluZXMgYW5kIGhhdmluZyBhZGVxdWF0ZSBzdXBwbHkgb2YgZGV0ZXJnZW50LjwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj4mbmJzcDs8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24ubGF1bmRyeVNlcnZpY2VzOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5JIGhhdmUgbGF1bmRyeSBzZXJ2aWNlcyBhdmFpbGFibGUgZm9yIHJlZ3VsYXIgdXNlLjwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIiBzdHlsZT0ibWFyZ2luLWxlZnQ6MzUuNDVwdDt0ZXh0LWluZGVudDotMzUuNDVwdCI+Jm5ic3A7PC9wPgogIDxoMj41LiBQcmFjdGljZSBnb29kIHdhc3RlIG1hbmFnZW1lbnQgYXQgeW91ciB3b3JrIHNpdGUgYW5kIGhvdXNpbmc8L2gyPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiPlByb3BlciBjb2xsZWN0aW9uIGFuZCByZW1vdmFsIG9mIGdhcmJhZ2UgaXMgY3J1Y2lhbAogICAgdG8gcmVkdWNpbmcgdGhlIHJpc2sgb2YgZGlzZWFzZSB0cmFuc21pc3Npb24uIFRoaXMgaW5jbHVkZXMgd2VhcmluZwogICAgZGlzcG9zYWJsZSBnbG92ZXMgdG8gcmVtb3ZlIHdhc3RlIGZyb20gcm9vbXMgYW5kIGNvbW1vbiBhcmVhcyBhbmQgdXNpbmcKICAgIHN0dXJkeSwgbGVhayByZXNpc3RhbnQgZ2FyYmFnZSBiYWdzIGZvciBjb250YWluaW5nIHdhc3RlLjwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj4mbmJzcDs8L3A+CiAgPHAgY2xhc3M9Ik5vcm1hbDEiIHN0eWxlPSJtYXJnaW4tbGVmdDozNS40NXB0O3RleHQtaW5kZW50Oi0zNS40NXB0Ij48Yj48c3BhbgogICAgICBzdHlsZT0iY29sb3I6IzQ0NzJDNCI+W3tkLmF0dGVzdGF0aW9uLndhc3RlTWFuYWdlbWVudEdsb3ZlczppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dCiAgICAgICAgICAgIDwvc3Bhbj48L2I+SSBoYXZlIGRpc3Bvc2FibGUgZ2xvdmVzIGZvciB0aGUgaGFuZGxpbmcgb2YgZ2FyYmFnZTwvcD4KICA8cCBjbGFzcz0iTm9ybWFsMSIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24ud2FzdGVNYW5hZ2VtZW50U2NoZWR1bGU6aWZFUSh0cnVlKTpzaG93KCdZZXMnKTplbHNlU2hvdygnX19fJyl9XQogICAgICAgICAgICA8L3NwYW4+PC9iPkkgaGF2ZSBhIHdhc3RlIHJlbW92YWwgc2NoZWR1bGUuPC9wPgogIDxwIGNsYXNzPSJOb3JtYWwxIiBzdHlsZT0ibWFyZ2luLWxlZnQ6MzUuNDVwdDt0ZXh0LWluZGVudDotMzUuNDVwdCI+PGI+PHNwYW4KICAgICAgc3R5bGU9ImNvbG9yOiM0NDcyQzQiPlt7ZC5hdHRlc3RhdGlvbi53YXN0ZU1hbmFnZW1lbnRCYWdzOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5JIGhhdmUgc3R1cmR5LCBsZWFrIHJlc2lzdGFudCBnYXJiYWdlIGJhZ3MuPC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiPiZuYnNwOzwvcD4KICA8aDI+Ni4gSGF2ZSBwcm9wZXIgaGFuZC13YXNoaW5nIGZhY2lsaXRpZXM6IEF0IHdvcmstc2l0ZSBhbmQgYWNjb21tb2RhdGlvbjwvaDI+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+SGVscGluZyB3b3JrZXJzIHRvIGVuZ2FnZSBpbiBoYW5kIGh5Z2llbmUgcHJldmVudHMgb3IKICAgIHJlZHVjZXMgdGhlIHNwcmVhZCBvZiBDT1ZJRC0xOSBhbmQgb3RoZXIgaWxsbmVzc2VzLiBJbmR1c3RyaWFsIENhbXAKICAgIG9wZXJhdG9ycyBzaG91bGQgZW5zdXJlIGVhc3kgYWNjZXNzIHRvIGhhbmQgaHlnaWVuZSBmYWNpbGl0aWVzIGVpdGhlcgogICAgdGhyb3VnaCBoYW5kIGh5Z2llbmUgc3RhdGlvbnMgb3IgdGhlIHByb3Zpc2lvbnMgb2YgaGFuZCBzYW5pdGl6ZXIgYXQgdGhlCiAgICB3b3JrIHNpdGUgYW5kIGF0IHRoZSBhY2NvbW1vZGF0aW9uIHNpdGUuPC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiPiZuYnNwOzwvcD4KICA8cCBjbGFzcz0iTm9ybWFsMSIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24uaGFuZFdhc2hpbmdTdGF0aW9uczppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dCiAgICAgICAgICAgIDwvc3Bhbj48L2I+SSBoYXZlIGFuIGFkZXF1YXRlIG51bWJlciBvZiBoYW5kIHdhc2hpbmcgc3RhdGlvbnMKICAgIChlaXRoZXIgcGVybWFuZW50IG9yIHBvcnRhYmxlKSBhdmFpbGFibGUgdG8gd29ya2VyczwvcD4KICA8cCBjbGFzcz0iTm9ybWFsMSIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24uaGFuZFdhc2hpbmdTb2FwV2F0ZXI6aWZFUSh0cnVlKTpzaG93KCdZZXMnKTplbHNlU2hvdygnX19fJyl9XQogICAgICAgICAgICA8L3NwYW4+PC9iPlRoZXJlIGlzIGFuIGFwcHJvcHJpYXRlIHN1cHBseSBvZiBzb2FwIGFuZCB3YXRlcjwvcD4KICA8cCBjbGFzcz0iTm9ybWFsMSIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24uaGFuZFdhc2hpbmdXYXRlcmxlc3M6aWZFUSh0cnVlKTpzaG93KCdZZXMnKTplbHNlU2hvdygnX19fJyl9XTwvc3Bhbj48L2I+CiAgICBJIGhhdmUgc3VwcGxlbWVudGVkIHdpdGggd2F0ZXJsZXNzIGhhbmQgc2FuaXRpemVycyB3aXRoIGEgbWluIG9mIDYwJQogICAgYWxjb2hvbCB3aGVyZSBhcHByb3ByaWF0ZTwvcD4KICA8cCBjbGFzcz0iTm9ybWFsMSIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24uaGFuZFdhc2hpbmdQYXBlclRvd2VsczppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dCiAgICAgICAgICAgIDwvc3Bhbj48L2I+SSBoYXZlIHByb3ZpZGVkIGRpc3Bvc2FibGUgcGFwZXIgdG93ZWxzLjwvcD4KICA8cCBjbGFzcz0iTm9ybWFsMSIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24uaGFuZFdhc2hpbmdTaWduYWdlOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5JIGhhdmUgcHV0IHVwIHNpZ25zIHRvIHByb21vdGUgcmVndWxhciBoYW5kIHdhc2hpbmcuPC9wPgogIDxwIGNsYXNzPSJOb3JtYWwxIiBzdHlsZT0ibWFyZ2luLWxlZnQ6MzUuNDVwdDt0ZXh0LWluZGVudDotMzUuNDVwdCI+Jm5ic3A7PC9wPgogIDxoMj43LiBQaHlzaWNhbCBkaXN0YW5jaW5nIHByYWN0aWNlczwvaDI+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+S2VlcGluZyBhIDItbWV0cmUgZGlzdGFuY2UgYmV0d2VlbiBwZW9wbGUgaXMgb25lIG9mCiAgICB0aGUgbW9zdCBpbXBvcnRhbnQgd2F5cyB0byBicmVhayB0aGUgY2hhaW4gb2YgdHJhbnNtaXNzaW9uIG9mCiAgICBDT1ZJRC0xOS4mbmJzcDsgSW5kdXN0cmlhbCBDYW1wIG9wZXJhdG9ycyBjYW4gdGFrZSBwcmFjdGljYWwgc3RlcHMgdG8KICAgIGVuc3VyZSBwaHlzaWNhbCBkaXN0YW5jaW5nIGlzIG1haW50YWluZWQgd2hpbGUgd29ya2VycyBhcmUgdHJhbnNwb3J0ZWQKICAgIHRvIG9yIGZyb20gdGhlIHdvcmsgc2l0ZSwgd2hpbGUgd29ya2luZyBpbmRvb3JzIG9yIG91dGRvb3JzLCBhbmQgZHVyaW5nCiAgICBicmVhay10aW1lcy4gPC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiPiZuYnNwOzwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj5QaHlzaWNhbCBiYXJyaWVycyBzdWNoIGFzIHRoZSB1c2Ugb2YgcGxleGktZ2xhc3MsCiAgICBmYWNlIHNoaWVsZHMsIG1hc2tzLCBhbmQgb3RoZXIgdGVjaG5pcXVlcyBjYW4gYmUgdXNlZCB3aGVyZSBwaHlzaWNhbAogICAgZGlzdGFuY2luZyBpcyBub3QgcG9zc2libGUuJm5ic3A7IDwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj4mbmJzcDs8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24uZGlzdGFuY2luZ01haW50YWluZWQ6aWZFUSh0cnVlKTpzaG93KCdZZXMnKTplbHNlU2hvdygnX19fJyl9XQogICAgICAgICAgICA8L3NwYW4+PC9iPkkgaGF2ZSB0YWtlbiBzdGVwcyB0byBlbnN1cmUgcGh5c2ljYWwgZGlzdGFuY2luZyBjYW4gYmUKICAgIG1haW50YWluZWQgZHVyaW5nIHdvcmsgYW5kIGFmdGVyIHdvcmsuPC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiIHN0eWxlPSJtYXJnaW4tbGVmdDozNS40NXB0O3RleHQtaW5kZW50Oi0zNS40NXB0Ij48Yj48c3BhbgogICAgICBzdHlsZT0iY29sb3I6IzQ0NzJDNCI+W3tkLmF0dGVzdGF0aW9uLmRpc3RhbmNpbmdGYWNlU2hpZWxkczppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dCiAgICAgICAgICAgIDwvc3Bhbj48L2I+SSBoYXZlIHBoeXNpY2FsIGJhcnJpZXJzIGxpa2UgZmFjZSBzaGllbGRzIG9yIG1hc2tzIGZvcgogICAgc2l0dWF0aW9ucyB3aGVyZSBwaHlzaWNhbCBkaXN0YW5jaW5nIGlzIG5vdCBwb3NzaWJsZS48L3A+CiAgPGgyPjguIEhhdmUgYSBjbGVhbmluZyBhbmQgZGlzaW5mZWN0aW5nIHNjaGVkdWxlPC9oMj4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj5BbGwgY29tbW9uIGFyZWFzIGFuZCBzdXJmYWNlcyBzaG91bGQgYmUgY2xlYW5lZCBhdAogICAgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgZWFjaCBkYXkuIEV4YW1wbGVzIG9mIGNvbW1vbiBhcmVhcyBhbmQgc3VyZmFjZXMKICAgIGluY2x1ZGUgd2FzaHJvb21zLCBjb21tb24gdGFibGVzLCBkZXNrcywgbGlnaHQgc3dpdGNoZXMsIGFuZCBkb29yCiAgICBoYW5kbGVzLiBSZWd1bGFyIGhvdXNlaG9sZCBjbGVhbmVycyBhcmUgZWZmZWN0aXZlIGFnYWluc3QgQ09WSUQtMTksCiAgICBmb2xsb3dpbmcgdGhlIGluc3RydWN0aW9ucyBvbiB0aGUgbGFiZWwuPC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiPiZuYnNwOzwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIiBzdHlsZT0ibWFyZ2luLWxlZnQ6MzUuNDVwdDt0ZXh0LWluZGVudDotMzUuNDVwdCI+PGI+PHNwYW4KICAgICAgc3R5bGU9ImNvbG9yOiM0NDcyQzQiPlt7ZC5hdHRlc3RhdGlvbi5kaXNpbmZlY3RpbmdTY2hlZHVsZTppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dCiAgICAgICAgICAgIDwvc3Bhbj48L2I+SSBoYXZlIGEgc2NoZWR1bGUgdG8gZW5zdXJlIGNvbW1vbiBhbmQgaGlnaCB0b3VjaCBhcmVhcwogICAgYXJlIGNsZWFuZWQgb3IgZGlzaW5mZWN0ZWQgYXQgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgZWFjaCBkYXkuPC9wPgogIDxoMj45LiBUcmFuc3BvcnRhdGlvbiBvZiBXb3JrZXJzPC9oMj4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj5Nb2RlcyBvZiB0cmFuc3BvcnRhdGlvbjo8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+Jm5ic3A7PC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiIHN0eWxlPSJtYXJnaW4tbGVmdDozNS40NXB0O3RleHQtaW5kZW50Oi0zNS40NXB0Ij48Yj48c3BhbgogICAgICBzdHlsZT0iY29sb3I6IzQ0NzJDNCI+W3tkLmF0dGVzdGF0aW9uLnRyYW5zcG9ydGF0aW9uU2luZ2xlT2NjdXBhbnQ6aWZFUSh0cnVlKTpzaG93KCdZZXMnKTplbHNlU2hvdygnX19fJyl9XQogICAgICAgICAgICA8L3NwYW4+PC9iPk9uZSBwZXJzb24gcGVyIHZlaGljbGU8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24udHJhbnNwb3J0YXRpb25CdXNlc1ZhbnM6aWZFUSh0cnVlKTpzaG93KCdZZXMnKTplbHNlU2hvdygnX19fJyl9XQogICAgICAgICAgICA8L3NwYW4+PC9iPkJ1c2VzIG9yIFZhbnM8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24udHJhbnNwb3J0YXRpb25UcnVja3NDYXJzOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5UcnVja3MgYW5kIENhcnM8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24udHJhbnNwb3J0YXRpb25IZWxpY29wdGVyOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5IZWxpY29wdGVyPC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiIHN0eWxlPSJtYXJnaW4tbGVmdDozNS40NXB0O3RleHQtaW5kZW50Oi0zNS40NXB0Ij4mbmJzcDs8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24udHJhbnNwb3J0YXRpb25UcmF2ZWxQb2Q6aWZFUSh0cnVlKTpzaG93KCdZZXMnKTplbHNlU2hvdygnX19fJyl9XQogICAgICAgICAgICA8L3NwYW4+PC9iPkkgaGF2ZSBtYWRlIGFycmFuZ2VtZW50cyBzbyB0aGF0IHdoZXJlIHdvcmtlcnMgYXJlCiAgICByZXF1aXJlZCB0byB0cmF2ZWwgdG9nZXRoZXIgaW4gdmVoaWNsZXMgb3IgaGVsaWNvcHRlcnMgdG8gdGhlIHdvcmsgc2l0ZSwKICAgIHdvcmtlcnMgd2lsbCB0cmF2ZWwgd2l0aCB0aGVpciB3b3JrIHBvZC48L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24udHJhbnNwb3J0YXRpb25DbGVhbmluZ0Rpc3RhbmNpbmc6aWZFUSh0cnVlKTpzaG93KCdZZXMnKTplbHNlU2hvdygnX19fJyl9XQogICAgICAgICAgICA8L3NwYW4+PC9iPlByb2NlZHVyZXMgZm9yIGZyZXF1ZW50IHZlaGljbGUgY2xlYW5pbmcgYW5kIHBoeXNpY2FsCiAgICBkaXN0YW5jaW5nIG9yIHVzZSBwZXJzb25hbCBwcm90ZWN0aXZlIGVxdWlwbWVudCBoYXZlIGJlZW4gZGV2ZWxvcGVkIGFuZAogICAgY29tbXVuaWNhdGVkIHRvIHRoZSB3b3JrZXJzIHByaW9yIHRvIGJlaW5nIHRyYW5zcG9ydGVkIHRvIHRoZSB3b3Jrc2l0ZS48L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPiZuYnNwOzwvcD4KICA8aDE+My4gQWZ0ZXIgd29ya2VycyBhcnJpdmUgYXQgdGhlIEluZHVzdHJpYWwgQ2FtcDwvaDE+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+T25jZSB5b3VyIHdvcmtlcnMgYXJyaXZlIGF0IHRoZSBsb2NhdGlvbiwgeW91IGFyZQogICAgZXhwZWN0ZWQgdG8gY29udGludWUgeW91ciB3b3JrIGVuYWN0aW5nIGFuIGluZmVjdGlvbiBwcmV2ZW50aW9uIGNvbnRyb2wKICAgIHBsYW4gYW5kIG1pbmltaXplIHRoZSByaXNrIG9mIHRyYW5zbWlzc2lvbiBvZiBDT1ZJRC0xOSB0aHJvdWdoIHRoZQogICAgZm9sbG93aW5nIGtleSBhY3Rpdml0aWVzLjwvcD4KICA8aDI+MS4gSW1wbGVtZW50IENPVklELTE5IEVtcGxveWVlIEVkdWNhdGlvbjwvaDI+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+SW5kdXN0cmlhbCBDYW1wIG9wZXJhdG9ycyBuZWVkIHRvIG1ha2Ugd29ya2VycyBhd2FyZQogICAgb2YgdGhlIHJpc2tzIG9mIENPVklELTE5IGFuZCBiZSBwcmVwYXJlZCBpZiB3b3JrZXJzIGhhdmUgcXVlc3Rpb25zIGFib3V0CiAgICBDT1ZJRC0xOS48L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+Jm5ic3A7PC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiIHN0eWxlPSJtYXJnaW4tbGVmdDozNS40NXB0O3RleHQtaW5kZW50Oi0zNS40NXB0Ij48Yj48c3BhbgogICAgICBzdHlsZT0iY29sb3I6IzQ0NzJDNCI+W3tkLmF0dGVzdGF0aW9uLmVkdWNhdGlvblNpZ25hZ2U6aWZFUSh0cnVlKTpzaG93KCdZZXMnKTplbHNlU2hvdygnX19fJyl9XQogICAgICAgICAgICA8L3NwYW4+PC9iPkkgaGF2ZSBzaWduYWdlIGluIHBsYWNlIGluIHRoZSBhcHByb3ByaWF0ZSBsYW5ndWFnZSBvbgogICAgaG93IGVtcGxveWVlcyBjYW4gcHJvdGVjdCB0aGVtc2VsdmVzIGZyb20gQ09WSUQtMTk8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24uZWR1Y2F0aW9uQ29udGFjdFBlcnNvbm5lbDppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dPC9zcGFuPjwvYj5JCiAgICBoYXZlIHNvbWVvbmUgaWRlbnRpZmllZCB0aGF0IHdvcmtlcnMgY2FuIGdvIHRvIGlmIHRoZXkgaGF2ZSBxdWVzdGlvbiBvbgogICAgQ09WSUQtMTk8L3A+CiAgPGgyPjIuIFRyYWluIHdvcmtlcnMgb24gQ09WSUQtMTkgaW5mZWN0aW9uIGNvbnRyb2w8L2gyPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiPkluZHVzdHJpYWwgQ2FtcCBvcGVyYXRvcnMgbXVzdCBwcm92aWRlIHdvcmtlcnMgd2l0aAogICAgdHJhaW5pbmcgaW4gYSBsYW5ndWFnZSB0aGF0IGlzIGFjY2Vzc2libGUgdG8gdGhlbSBhYm91dCB0aGUgcmlzayBvZgogICAgQ09WSUQtMTksIHNhZmUgd29yayBwcmFjdGljZXMsIGFuZCBob3cgdG8gcmVwb3J0IHN5bXB0b21zLjwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj4mbmJzcDs8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24udHJhaW5pbmdDb3ZpZDE5OmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5JIGhhdmUgbWF0ZXJpYWxzIHJlYWR5IG9uIHRoZSByaXNrIG9mIGV4cG9zdXJlIG9mCiAgICBDT1ZJRC0xOSBhbmQgdGhlIHNpZ25zIGFuZCBzeW1wdG9tcyBvZiB0aGUgZGlzZWFzZS48L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24udHJhaW5pbmdFdGlxdWV0dGU6aWZFUSh0cnVlKTpzaG93KCdZZXMnKTplbHNlU2hvdygnX19fJyl9XQogICAgICAgICAgICA8L3NwYW4+PC9iPkkgaGF2ZSBtYXRlcmlhbHMgcmVhZHkgb24gaGFuZCB3YXNoaW5nLCBwaHlzaWNhbAogICAgZGlzdGFuY2luZywgYW5kIGNvdWdoL3NuZWV6ZSBldGlxdWV0dGUuPC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiIHN0eWxlPSJtYXJnaW4tbGVmdDozNS40NXB0O3RleHQtaW5kZW50Oi0zNS40NXB0Ij48Yj48c3BhbgogICAgICBzdHlsZT0iY29sb3I6IzQ0NzJDNCI+W3tkLmF0dGVzdGF0aW9uLnRyYWluaW5nTG9jYXRpb25zOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5JIGNhbiBwcm92aWRlIGxvY2F0aW9ucyBvZiBoYW5kIHdhc2hpbmcgZmFjaWxpdGllcywKICAgIGluY2x1ZGluZyBkaXNwZW5zaW5nIHN0YXRpb25zIGZvciBhbGNvaG9sLWJhc2VkIGhhbmQgcnVicy48L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24udHJhaW5pbmdGaXJzdEFpZDppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dCiAgICAgICAgICAgIDwvc3Bhbj48L2I+SSBoYXZlIG1hdGVyaWFscyByZWFkeSBvbiBob3cgdG8gc2VlayBmaXJzdCBhaWQuPC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiIHN0eWxlPSJtYXJnaW4tbGVmdDozNS40NXB0O3RleHQtaW5kZW50Oi0zNS40NXB0Ij48Yj48c3BhbgogICAgICBzdHlsZT0iY29sb3I6IzQ0NzJDNCI+W3tkLmF0dGVzdGF0aW9uLnRyYWluaW5nUmVwb3J0aW5nOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5JIGhhdmUgbWF0ZXJpYWxzIHJlYWR5IG9uIGhvdyB0byByZXBvcnQgYW4gZXhwb3N1cmUgdG8gb3IKICAgIHN5bXB0b21zIG9mIENPVklELTE5LjwvcD4KICA8aDI+My4gTWVhbCBQcmVwYXJhdGlvbjpQcmFjdGljZSBzYWZlIGZvb2QgaGFuZGxpbmc8L2gyPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiPkFsbCBlbXBsb3llcnMgYW5kIGVtcGxveWVlcyBtdXN0IHByYWN0aWNlIGdvb2QgZm9vZAogICAgaGFuZGxpbmcgYW5kIGh5Z2llbmUgcHJhY3RpY2VzLiA8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+VGhpcyBpbmNsdWRlcyBzYWZlIGZvb2QgcHJhY3RpY2VzIGxpa2UgcHJvdGVjdGluZwogICAgZm9vZHMgZnJvbSBjb250YW1pbmF0aW9uLCBtaW5pbWl6aW5nIGRpcmVjdCBoYW5kbGluZyBvZiBmb29kIGFuZAogICAgcHJldmVudGluZyBjcm9zcyBjb250YW1pbmF0aW9uIG9mIGZvb2RzLjwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj4mbmJzcDs8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24ubWVhbHNEaXN0YW5jaW5nOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5JIGhhdmUgc2NoZWR1bGVzIGluIHBsYWNlIGZvciBraXRjaGVuL2VhdGluZyBhcmVhcyB0bwogICAgbGltaXQgY29udGFjdCBhbmQgbWFpbnRhaW4gMiBtZXRyZSBwaHlzaWNhbCBkaXN0YW5jaW5nLjwvcD4KICA8cCBjbGFzcz0iTm9ybWFsMSIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24ubWVhbHNEaXNod2FyZTppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dPC9zcGFuPjwvYj4KICAgIEVhY2ggZW1wbG95ZWUgaGFzIHRoZWlyIG93biBkaXNod2FyZSwgdXRlbnNpbHMgYW5kIGRyaW5raW5nIGN1cC48L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24ubWVhbHNEaXNod2FzaGluZzppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dCiAgICAgICAgICAgIDwvc3Bhbj48L2I+VXNlZCBkaXNod2FyZSB3aWxsIGJlIHdhc2hlZCBpbW1lZGlhdGVseS48L3A+CiAgPGgxPjQuIElmIHdvcmtlcnMgYmVjb21lIGlsbCBhdCB0aGUgSW5kdXN0cmlhbCBDYW1wPC9oMT4KICA8aDI+MS4gUGxhbiB0byBtYW5hZ2UgaW5kaXZpZHVhbHMgd2l0aCBzdXNwZWN0ZWQgQ09WSUQtMTkgSW5mZWN0aW9uPC9oMj4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj5JbmR1c3RyaWFsIENhbXAgb3BlcmF0b3JzIG11c3QgaGF2ZSBhIHBsYW4gYW5kCiAgICBwcm90b2NvbCB0byBkZWFsIHdpdGggd29ya2VycyBkZW1vbnN0cmF0aW5nIHN5bXB0b21zIG9mIENPVklELTE5LAogICAgaW5jbHVkaW5nIGltbWVkaWF0ZSBzZWxmLWlzb2xhdGlvbiBvZiB0aGUgd29ya2VyIGFuZCBub3RpZnlpbmcgdGhlIGxvY2FsCiAgICBoZWFsdGggYXV0aG9yaXR5LiA8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+SWYgdHdvIG9yIG1vcmUgd29ya2VycyBiZWNvbWUgc2ljaywgeW91IG11c3Qgbm90aWZ5CiAgICB0aGUgbG9jYWwgPHU+TWVkaWNhbCBIZWFsdGggT2ZmaWNlcjwvdT4gb2YgdGhlIG91dGJyZWFrLjwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj4mbmJzcDs8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24uaW5mZWN0aW9uU2VwYXJhdGlvbjppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dCiAgICAgICAgICAgIDwvc3Bhbj48L2I+SSBhbSBwcmVwYXJlZCB0byBwcm9tcHRseSBzZXBhcmF0ZSB0aGUgaW5kaXZpZHVhbCBmcm9tCiAgICBvdGhlcnMgaW4gdGhlaXIgb3duIGFjY29tbW9kYXRpb24uPC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiIHN0eWxlPSJtYXJnaW4tbGVmdDozNS40NXB0O3RleHQtaW5kZW50Oi0zNS40NXB0Ij48Yj48c3BhbgogICAgICBzdHlsZT0iY29sb3I6IzQ0NzJDNCI+W3tkLmF0dGVzdGF0aW9uLmluZmVjdGlvblN5bXB0b21zOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5JIGFtIHByZXBhcmVkIHRvIHByb3ZpZGUgaW5kaXZpZHVhbHMgZXhoaWJpdGluZyBzeW1wdG9tcwogICAgb2YgQ09WSUQtMTkgd2l0aCBhIHN1cmdpY2FsL3Byb2NlZHVyYWwgbWFzayBvciB0aXNzdWVzIHRvIGNvdmVyIHRoZWlyCiAgICBtb3V0aCBhbmQgbm9zZS48L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24uaW5mZWN0aW9uSGVhdGhMaW5rQkM6aWZFUSh0cnVlKTpzaG93KCdZZXMnKTplbHNlU2hvdygnX19fJyl9XQogICAgICAgICAgICA8L3NwYW4+PC9iPkkgYW0gcHJlcGFyZWQgdG8gZGlyZWN0IHRoZSBwZXJzb24gdG8gY2FsbCBIZWFsdGhMaW5rQkMKICAgICg4LTEtMSkuPC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiIHN0eWxlPSJtYXJnaW4tbGVmdDozNS40NXB0O3RleHQtaW5kZW50Oi0zNS40NXB0Ij48Yj48c3BhbgogICAgICBzdHlsZT0iY29sb3I6IzQ0NzJDNCI+W3tkLmF0dGVzdGF0aW9uLmluZmVjdGlvblNhbml0aXphdGlvbjppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dCiAgICAgICAgICAgIDwvc3Bhbj48L2I+SSBhbSBwcmVwYXJlZCB0byBjbGVhbiBhbmQgZGlzaW5mZWN0IGFueSByb29tcyB0aGF0IHRoZQogICAgcGVyc29uIGhhcyBiZWVuIGluIHdoaWxlIHN5bXB0b21hdGljLjwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIiBzdHlsZT0ibWFyZ2luLWxlZnQ6MzUuNDVwdDt0ZXh0LWluZGVudDotMzUuNDVwdCI+PGI+PHNwYW4KICAgICAgc3R5bGU9ImNvbG9yOiM0NDcyQzQiPlt7ZC5hdHRlc3RhdGlvbi5pbmZlY3Rpb25BY2NvbW1vZGF0aW9uOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5JZiBjb21tZXJjaWFsIGFjY29tbW9kYXRpb24gaXMgYmVpbmcgdXNlZCB0bwogICAgc2VsZi1pc29sYXRlLCB0aGVuIEkgd2lsbCBpbmZvcm0gbWFuYWdlbWVudCBvZiB0aGUgc2l0dWF0aW9uIGFuZAogICAgbmVjZXNzYXJ5IHJlcXVpcmVtZW50cy48L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+Jm5ic3A7PC9wPgogIDxoMj4yLiBQcm92aWRpbmcgRm9vZCBmb3IgSWxsIFdvcmtlcnM8L2gyPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiIHN0eWxlPSJtYXJnaW4tbGVmdDozNS40NXB0O3RleHQtaW5kZW50Oi0zNS40NXB0Ij48Yj48c3BhbgogICAgICBzdHlsZT0iY29sb3I6IzQ0NzJDNCI+W3tkLmF0dGVzdGF0aW9uLmluZmVjdGVkRmVlZGluZzppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dPC9zcGFuPjwvYj4KICAgIEkgYW0gYWJsZSB0byBwcm92aWRlIGZvb2QgaW4gYSBzYWZlIG1hbm5lciB0byBhIHNlbGYtaXNvbGF0ZWQgd29ya2VyPC9wPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiPiZuYnNwOzwvcD4KICA8aDI+My4gSG91c2VrZWVwaW5nIGZvciBJbGwgV29ya2VyczwvaDI+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24uaW5mZWN0ZWRIb3VzZWtlZXBpbmc6aWZFUSh0cnVlKTpzaG93KCdZZXMnKTplbHNlU2hvdygnX19fJyl9XTwvc3Bhbj48L2I+CiAgICBJIGFtIGFibGUgdG8gcGVyZm9ybSBhZGVxdWF0ZSBob3VzZWtlZXBpbmcgZm9yIGEgc2VsZi1pc29sYXRlZCB3b3JrZXI8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+Jm5ic3A7PC9wPgogIDxoMj40LiBXYXN0ZSBNYW5hZ2VtZW50IGZvciBJbGwgV29ya2VyczwvaDI+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjM1LjQ1cHQ7dGV4dC1pbmRlbnQ6LTM1LjQ1cHQiPjxiPjxzcGFuCiAgICAgIHN0eWxlPSJjb2xvcjojNDQ3MkM0Ij5be2QuYXR0ZXN0YXRpb24uaW5mZWN0ZWRXYXN0ZTppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dCiAgICAgICAgICAgIDwvc3Bhbj48L2I+SSBhbSBhYmxlIHRvIHBlcmZvcm0gYWRlcXVhdGUgaG91c2VrZWVwaW5nIGZvciBhIHNlbGYtCiAgICBpc29sYXRlZCB3b3JrZXI8L3A+CiAgPHAgY2xhc3M9Ik1zb05vcm1hbCI+Jm5ic3A7PC9wPgogIDxoMT41LiBSZXZpZXcgYW5kIENlcnRpZnk8L2gxPgogIDxwIGNsYXNzPSJNc29Ob3JtYWwiIHN0eWxlPSJtYXJnaW4tbGVmdDozNS40NXB0O3RleHQtaW5kZW50Oi0zNS40NXB0Ij48Yj48c3BhbgogICAgICBzdHlsZT0iY29sb3I6IzQ0NzJDNCI+W3tkLmF0dGVzdGF0aW9uLmNlcnRpZnlBY2N1cmF0ZUluZm9ybWF0aW9uOmlmRVEodHJ1ZSk6c2hvdygnWWVzJyk6ZWxzZVNob3coJ19fXycpfV0KICAgICAgICAgICAgPC9zcGFuPjwvYj5JIGNlcnRpZnkgdGhpcyBpbmZvcm1hdGlvbiB0byBiZSBhY2N1cmF0ZTwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIiBzdHlsZT0ibWFyZ2luLWxlZnQ6MzUuNDVwdDt0ZXh0LWluZGVudDotMzUuNDVwdCI+PGI+PHNwYW4KICAgICAgc3R5bGU9ImNvbG9yOiM0NDcyQzQiPlt7ZC5hdHRlc3RhdGlvbi5hZ3JlZVRvSW5zcGVjdGlvbjppZkVRKHRydWUpOnNob3coJ1llcycpOmVsc2VTaG93KCdfX18nKX1dCiAgICAgICAgICAgIDwvc3Bhbj48L2I+SSBhZ3JlZSB0aGF0IG15IEluZHVzdHJpYWwgQ2FtcHMgd2lsbCBiZSBzdWJqZWN0IHRvIGEKICAgIHNpdGUgaW5zcGVjdGlvbjwvcD4KICA8cCBjbGFzcz0iTXNvTm9ybWFsIj4mbmJzcDs8L3A+CjwvZGl2Pgo8L2JvZHk+CjwvaHRtbD4K';

export const templateBase64: string =
  '';
